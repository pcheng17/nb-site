#!/usr/bin/env ruby

require "date"
require "json"
require "redcarpet"

VERSION = '1.3.1'
OUTPUT_DIR = 'public'

def version
  return "#{VERSION}"
end

def generated
  return Time.now.to_i
end

# Helper function to get week identifier (year-week)
# TODO Need to handle edge cases where the week crosses over to the next year
# Currently, this only works for 2024-2025
# TODO add unit tests for this
def get_week_identifier(date_str)
  date = Date.parse(date_str)
  first_day_of_week = date - date.wday
  last_day_of_week = first_day_of_week + 6
  week_num = last_day_of_week.strftime('%V').to_i
  year = last_day_of_week.year
  [first_day_of_week.strftime('%b %d, %Y'), week_num, year]
end

def slugify(text)
  text.downcase.strip
    .gsub(' ', '-')
    .gsub(/[^\w-]/, '')
    .gsub(/-+/, '-')
    .gsub(/^-+|-+$/, '')
end

def link(entry, target: nil)
  target_attr = target ? ' target="_blank"' : ''
  <<~HTML
    <a href="#{entry['url']}" id="#{entry['slug']}" #{target_attr}>#{entry['title']}</a>
  HTML
end

start_time = Time.now

# Read the JSON file
json_data = File.read('./data/bookmarks.json')
entries = JSON.parse(json_data)

# De-duplicate slugs since titles may not be unique
slug_counts = Hash.new(0)
entries.each do |entry|
  base_slug = slugify(entry['title'])
  slug_counts[base_slug] += 1
  if slug_counts[base_slug] == 1
    entry['slug'] = base_slug
  else
    entry['slug'] = "#{base_slug}-#{slug_counts[base_slug]-1}"
  end
end

# Group entries by week
entries_by_week = entries.group_by { |entry| get_week_identifier(entry['date']) }

markdown = Redcarpet::Markdown.new(Redcarpet::Render::HTML)

# Create HTML content
html_content = <<-HTML
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="weekly-version" content="#{version}">
  <meta name="generated-at" content="#{generated}">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/jetbrains-mono@1.0.6/css/jetbrains-mono.min.css">
  <link rel="stylesheet" href="https://www.nerdfonts.com/assets/css/webfont.css">
  <title>nb.petercheng.me</title>
  <style>
    body {
      background-color: rgb(250, 245, 230);
      font-family: JetBrains Mono;
      font-size: 14px;
      line-height: 1.5;
      margin: 0;
    }
    header {
      margin: 1rem 0;
    }
    .container {
      max-width: 800px;
      margin: 1rem auto;
      padding: 0rem 1rem 0rem 1rem;
    }
    .week-group {
      margin: 1rem 0;
      background-color: rgb(255, 253, 245);
      padding: 1rem;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      border-radius: 10px;
    }
    .metadata {
      font-size: 0.9em;
      color: #666;
      padding-top: 0.4rem;
      padding-bottom: 0.9rem;
    }
    .icon {
      margin-right: 0.2rem;
    }
    i.nf {
      margin: 0;
      position: relative;
      top: -1px;
    }
    .week-header {
      margin: 0;
      padding: 0.2rem 0;
      font-size: 1.6em;
    }
    .link-icon {
      color: #666;
      font-size: 0.85em;
    }
    .link-icon-header {
      color: #666;
      font-size: 0.85em;
      position: relative;
      top: -2px;
    }
    .entry_list {
      margin: 0;
      padding: 0;
      list-style-type: none;
      padding-left: 0;
    }
    .title {
      font-size: 1.2em;
    }
    .entry {
      padding: 0.6rem 0;
    }
    .entry p {
      margin: 0;
    }
    .entry:first-child {
      padding-top: 0rem;
    }
    .entry:last-child {
      padding-bottom: 0rem;
    }
    a {
      color: #0066cc;
      text-decoration: none;
      target-new: tab;
    }
    a:hover {
      text-decoration: underline;
    }
    footer {
      font-size: 0.9em;
      margin-top: 2rem;
      margin-bottom: 2rem;
      padding-top: 1rem;
      padding-bottom: 1rem;
      text-align: center;
      color: #a1a1a1;
    }
    #copyright {
      margin: 0.5rem;
    }
    #build-info > #version-info {
      margin-right: 0.5rem;
    }
    nav {
      display: flex;
      justify-content: center;
    }
    nav a {
      margin: 0 1rem;
      color: #0066cc;
      text-decoration: none;
    }
    @media (max-width: 480px) {
      body {
        font-size: 12px;
      }
      header {
        margin: 0.5rem 0;
      }
      .container {
        margin: 0.5rem auto;
        padding: 0rem 0.5rem 0rem 0.5rem;
      }
      .week-group {
        margin: 0.5rem 0;
        padding: 0.5rem;
      }
      .week-header {
        padding: 0.1rem 0;
      }
      .metadata {
        padding-top: 0.3rem;
        padding-bottom: 0.7rem;
      }
      .entry {
        padding-top: 0.4rem;
        padding-bottom: 0.4rem;
      }
      nav a {
        margin: 0 0.5rem;
      }
    }
  </style>
</head>
<body>
HTML

html_content += <<-CONTAINER
<div class="container">
CONTAINER

# html_content += <<-HEADER
# <header>
#   <nav>
#     #{link({'title' => 'Bookmarks', 'url' => './'}, target: false)}
#     #{link({'title' => 'Notes', 'url' => './notes'}, target: false)}
#   </nav>
# </header>
# HEADER

# Sort weeks in reverse chronological order
total_weeks = entries_by_week.keys.length
entries_by_week.keys.sort.reverse.each.with_index do |week_data, index|
  first_day, week_num, year = week_data
  html_content += <<-WEEK_GROUP
  <div class="week-group">
    <h2 class="week-header" id="week-#{week_num}-of-#{year}">
      ##{total_weeks - index} - Week #{week_num} of #{year}
      <a href="#week-#{week_num}-of-#{year}" class="link-icon-header" aria-label="Jump to section">
        <i class="nf nf-oct-link"></i>
      </a>
    </h2>
    <div class="metadata">
      <span class="first-day-of-week">
        <i class="nf nf-oct-calendar"></i>
        <span class="date">#{first_day}</span>
      </span>
      //
      <span class="entry-count">
        <span class="count">#{entries_by_week[week_data].length} entries</span>
      </span>
    </div>
  WEEK_GROUP

  html_content += <<-WEEK_ENTRIES
  <ul class="entry_list">
  WEEK_ENTRIES

  # Sort entries within each week by date (newest first)
  entries_by_week[week_data].sort_by { |entry| entry['date'] }.reverse.each do |entry|
    html_content += <<-ENTRY
    <li class="entry">
      <div class="title">
        #{link(entry, target: true)}
        <a href="##{entry['slug']}" class="link-icon" aria-label="Jump to section">
          <i class="nf nf-oct-link"></i>
        </a>
      </div>
      <div class="description">
        #{markdown.render(entry['description'])}
      </div>
    </li>
    ENTRY
  end
  html_content += "</ul>\n"
  html_content += "</div>\n"
end

html_content += <<-END_CONTAINER
</div>
END_CONTAINER

html_content += <<-FOOTER
<footer>
  <div id="copyright">
    <i class="nf nf-fa-copyright"></i>
    <span>#{Time.now.year} Peter Cheng</span>
  </div>
  <div id="build-info">
    <span id="version-info">
      <i class="nf nf-oct-tag"></i>
      <span class="version-number">v#{version}</span>
    </span>
    <i class="nf nf-fa-clock"></i>
    <time data-utc="#{Time.now.utc.strftime("%Y-%m-%dT%H:%M:%S.%LZ")}" class="local-time"></time>
  </div>
</footer>
FOOTER

html_content += <<-SCRIPTS
<script>
  document.querySelectorAll('.local-time').forEach(timeElement => {
    const utcDate = new Date(timeElement.dataset.utc);
    timeElement.textContent = utcDate.toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      hour: 'numeric',
      minute: '2-digit',
      hour12: true,
      timeZoneName: 'short'
    });
  });
</script>
SCRIPTS

html_content += <<-HTML
</body>
</html>
HTML

# First make sure the build directory exists
Dir.mkdir(OUTPUT_DIR) unless Dir.exist?(OUTPUT_DIR)

# Write the HTML file
File.write("./#{OUTPUT_DIR}/index.html", html_content)
puts "HTML file has been generated as './#{OUTPUT_DIR}/index.html'"

end_time = Time.now
duration = end_time - start_time
puts "Time taken: #{duration} seconds"
